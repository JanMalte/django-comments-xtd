{"version":3,"file":"dcx-3.0.0.js","mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA;;AAEA,uBAAuB;;AAEvB,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/G4C;AACK;;;AAGjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wDAAW;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uDAAiB;AAC9D;AACA;;AAEyB;;;;;;;;;;;;;;;AC1CzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+DAA+D,WAAW;AAC1E;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,2BAA2B,qBAAqB,QAAQ,eAAe;AACvE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D,IAAI;AAC/D;AACA;AACA;AACA;AACA,uEAAuE,IAAI;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC,8BAA8B,mCAAmC;AACjE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,8BAA8B;AACtD;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,gCAAgC,uCAAuC;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,2DAA2D,IAAI;AAC/D,qEAAqE,IAAI;AACzE;AACA;AACA;AACA;AACA,2CAA2C,IAAI;AAC/C;AACA;AACA,6DAA6D;AAC7D;AACA,4DAA4D;AAC5D,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,aAAa;AACnE;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD,wBAAwB,eAAe;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAEyB;;;;;;;;;;;;;;;ACjTX;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,SAAS;;AAEzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,SAAS;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA,mCAAmC;AACnC;AACA,wCAAwC,iBAAiB;AACzD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCnOA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN8C;AACE;;AAEhD,2BAA2B,uDAAa;AACxC,4BAA4B,yDAAc;;AAE1C;AACA;AACA;AACA;;AAEA,IAAI,2DAAa;AACjB,IAAI,6DAAc;AAClB,CAAC","sources":["webpack://django-comments-xtd/./django_comments_xtd/static/django_comments_xtd/js/comment_form.js","webpack://django-comments-xtd/./django_comments_xtd/static/django_comments_xtd/js/comments.js","webpack://django-comments-xtd/./django_comments_xtd/static/django_comments_xtd/js/reactions.js","webpack://django-comments-xtd/./django_comments_xtd/static/django_comments_xtd/js/reply_forms.js","webpack://django-comments-xtd/webpack/bootstrap","webpack://django-comments-xtd/webpack/runtime/define property getters","webpack://django-comments-xtd/webpack/runtime/hasOwnProperty shorthand","webpack://django-comments-xtd/webpack/runtime/make namespace object","webpack://django-comments-xtd/./django_comments_xtd/static/django_comments_xtd/js/index.js"],"sourcesContent":["export default class CommentForm {\n    constructor(formWrapper) {\n        this.formWrapper = formWrapper;\n        this.init();\n    }\n\n    click_on_post(_) { return this.post(\"post\"); }\n\n    click_on_preview(_) { return this.post(\"preview\"); }\n\n    init() {\n        this.formWrapperEl = document.querySelector(this.formWrapper);\n        this.formEl = this.formWrapperEl.querySelector(\"form\");\n        const post_btn = this.formEl.elements.post;\n        const preview_btn = this.formEl.elements.preview;\n        post_btn.addEventListener(\"click\", (_) => this.post(\"post\"));\n        preview_btn.addEventListener(\"click\", (_) => this.post(\"preview\"));\n        // Change the type of the buttons, otherwise the form is submitted.\n        post_btn.type = \"button\";\n        preview_btn.type = \"button\";\n    }\n\n    disable_btns(value) {\n        this.formEl.elements.post.disabled = value;\n        this.formEl.elements.preview.disabled = value;\n    }\n\n    is_valid() {\n        for (const el of this.formEl.querySelectorAll(\"[required]\")) {\n            if (!el.reportValidity()) {\n                el.focus();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    post(submit_button_name) {\n        if (!this.is_valid()) {\n            return;\n        }\n        this.disable_btns(true);\n\n        // If the <section data-dcx=\"preview\">...</section> does exist,\n        // delete it. If the user clicks again in the \"preview\" button\n        // it will be displayed again.\n        const preview = this.formWrapperEl.querySelector(\"[data-dcx=preview]\");\n        if (preview) {\n            preview.remove();\n        }\n\n        const formData = new FormData(this.formEl);\n        if (submit_button_name !== undefined) {\n            formData.append(submit_button_name, 1);\n        }\n\n        fetch(this.formEl.action, {\n            method: 'POST',\n            headers: {\n                \"X-Requested-With\": \"XMLHttpRequest\",\n            },\n            body: formData\n        }).then(response => {\n            if (submit_button_name === \"preview\") {\n                this.handle_preview_comment_response(response);\n            } else if (submit_button_name === \"post\") {\n                this.handle_post_comment_response(response);\n            }\n        });\n\n        this.disable_btns(false);\n        return false; // To prevent calling the action attribute.\n    }\n\n    async handle_preview_comment_response(response) {\n        const data = await response.json();\n        if (response.status === 200) {\n            this.formWrapperEl.innerHTML = data.html;\n            this.init();\n            if (data.field_focus) {\n                this.formEl.querySelector(`[name=${data.field_focus}]`).focus();\n            }\n        } else if (response.status === 400) {\n            this.formEl.innerHTML = data.html;\n        }\n    }\n\n    async handle_post_comment_response(response) {\n        const data = await response.json();\n\n        if (response.status === 200) {\n            this.formWrapperEl.innerHTML = data.html;\n            this.init();\n            if (data.field_focus) {\n                this.formEl.querySelector(`[name=${data.field_focus}]`).focus();\n            }\n        }\n        else if (\n            response.status === 201 ||\n            response.status === 202 ||\n            response.status === 400\n        ) {\n            this.formEl.innerHTML = data.html;\n        }\n        else if (response.status > 400) {\n            alert(\n                \"Something went wrong and your comment could not be \" +\n                \"processed. Please, reload the page and try again.\"\n            );\n        }\n    }\n}\n","import CommentForm from \"./comment_form.js\";\nimport ReplyFormsHandler from \"./reply_forms.js\";\n\n\nfunction init_comments() {\n    if (window.dcx === null) {\n        return;\n    }\n\n    if (window.dcx.page_param === undefined) {\n        const rroot = document.querySelector(\"[data-dcx=config]\");\n        if (rroot) {\n            window.dcx.page_param = rroot.getAttribute(\"data-page-qs-param\");\n        }\n    }\n\n    window.dcx.comment_form = null;\n    window.dcx.reply_forms_handler = null;\n\n    /* ----------------------------------------------\n     * Initialize main comment form.\n     */\n    const qs_cform = \"[data-dcx=comment-form]\";\n    if (window.dcx.comment_form === null &&\n        document.querySelector(qs_cform)\n    ) {\n        window.dcx.comment_form = new CommentForm(qs_cform);\n    }\n\n    /* ----------------------------------------------\n     * Initialize reply forms.\n     */\n    const qs_rform_base = \"[data-dcx=reply-form-template]\";\n    const qs_rforms = \"[data-dcx=reply-form]\";\n    if (window.dcx.reply_forms_handler === null &&\n        document.querySelector(qs_rform_base) &&\n        document.querySelectorAll(qs_rforms)\n    ) {\n        window.dcx.reply_forms_handler = new ReplyFormsHandler(qs_rform_base, qs_rforms);\n    }\n}\n\nexport { init_comments };\n","function init_reactions() {\n    const rroot = document.querySelector(\"[data-dcx=config]\");\n    if (rroot === null || window.dcx === null) {\n        return;\n    }\n\n    /* ----------------------------------------------\n     * Initialize dcx namespace values.\n     */\n    if (window.dcx.guest === undefined) {\n        window.dcx.guest = rroot.getAttribute(\"data-guest-user\");\n    }\n    window.dcx.login_url = init_login_url(rroot);\n    window.dcx.react_url = init_react_url(rroot);\n\n    /* ----------------------------------------------\n     * Initialize the buttons panels and their components.\n     */\n    const links = document.querySelectorAll(\"[data-dcx=reactions-panel]\");\n    if (links.length === 0) {\n        throw new Error(\"Cannot initialize reactions panel => There are no \" +\n            \"elements with [data-dcx=reactions-panel].\");\n    }\n    // create_buttons_panels(links, row_length, header_title);\n    create_buttons_panels(links);\n\n    /* ----------------------------------------------\n     * Initialize reactions-tooltips.\n     */\n    document\n        .querySelectorAll(\"[data-toggle=reactions-tooltip]\")\n        .forEach(node => {\n            node.addEventListener(\"mouseover\", on_mouseover_tooltip);\n            node.addEventListener(\"mouseout\", on_mouseout_tooltip);\n        });\n}\n\nfunction init_login_url(elem) {\n    const url = elem.getAttribute(\"data-login-url\");\n    if (url === null || url.length === 0) {\n        if (window.dcx.guest && window.dcx.guest === \"1\") {\n            throw new Error(\"Cannot initialize reactions panel => The \" +\n                \"[data-login-url] attribute does not exist or is empty.\");\n        }\n    }\n    return url;\n}\n\nfunction init_react_url(elem) {\n    const url = elem.getAttribute(\"data-react-url\");\n    if (url === null || url.length === 0) {\n        if (window.dcx.guest && window.dcx.guest === \"0\") {\n            throw new Error(\"Cannot initialize reactions panel => The \" +\n                \"[data-react-url] attribute does not exist or is empty.\");\n        } else {\n            console.info(\"Couldn't find the data-react-url attribute, \" +\n                \"but the user is anonymous. She has to login first in order \" +\n                \"to post comment reactions.\");\n        }\n    }\n    return url;\n}\n\nfunction toggle_buttons_panel(comment_id) {\n    return (event) => {\n        event.preventDefault();\n        // Hide all the panels but the target.\n        document.querySelectorAll(\".reactions-panel\").forEach(elem => {\n            if (elem.getAttribute(\"data-crpanel\") !== comment_id) {\n                elem.style.display = \"none\";\n            }\n        });\n        // Toggle the panel corresponding to the clicked link.\n        const panel = document.querySelector(`[data-crpanel=\"${comment_id}\"]`);\n        if (panel) {\n            if (panel.style.display !== \"block\") {\n                panel.style.display = \"block\";\n            } else {\n                panel.style.display = \"\";\n            }\n        }\n    };\n}\n\nfunction create_buttons_panels(nodes) {\n    const qs_template = \"[data-dcx=reactions-panel-template]\";\n    const template = document.querySelector(qs_template);\n\n    for (const elem of Array.from(nodes)) {\n        const comment_id = elem.getAttribute(\"data-comment\");\n        if (comment_id === null) {\n            continue;\n        }\n\n        const panel = template.cloneNode(true);\n        delete panel.dataset.dcx;\n        panel.setAttribute(\"data-crpanel\", `${comment_id}`);\n        const header = panel.querySelector(\"h3\");\n        const header_title = header.textContent;\n        const buttons = panel.querySelectorAll(\"P > BUTTON\");\n\n        for (const btn of Array.from(buttons)) {\n            if (window.dcx.guest === \"0\") {\n                btn.addEventListener(\"click\", on_click_reaction_btn(btn.dataset.code, comment_id));\n            } else {\n                btn.addEventListener(\"click\", function(_) {\n                    window.location.href = (\n                        `${window.dcx.login_url}?next=${login_next_url}`\n                    );\n                });\n            }\n            btn.addEventListener(\"mouseover\", on_mouseover_reaction_btn(header));\n            btn.addEventListener(\"mouseout\", on_mouseout_reaction_btn(header, header_title));\n        }\n\n        elem.parentNode.insertBefore(panel, elem);\n        calc_buttons_panel_position(comment_id);\n        elem.addEventListener(\"click\", toggle_buttons_panel(comment_id));\n    }\n}\n\nfunction calc_buttons_panel_position(cid) {\n    const panel = document.querySelector(`[data-crpanel=\"${cid}\"]`);\n    if (panel) {\n        const rroot = document.querySelector(\"[data-dcx=config]\");\n        const bottom = parseInt(rroot.getAttribute(\"data-popover-pos-bottom\")) || 0;\n        const left = parseInt(rroot.getAttribute(\"data-popover-pos-left\")) || 0;\n        const elem_sel = `[data-dcx=\"reactions-panel\"][data-comment=\"${cid}\"]`;\n        const elem = document.querySelector(elem_sel);\n        // elem is the <a>React</a>, and elem.parentNode.parentNode is the\n        // element containing the .active-reactions (reactions already\n        // selected by users).\n        const anchor_pos = elem.getBoundingClientRect();\n        const footer_pos = elem.parentNode.parentNode.getBoundingClientRect();\n        panel.style.bottom = `${bottom}px`;\n        panel.style.left = `${anchor_pos.x - footer_pos.x - left}px`;\n    }\n}\n\nfunction on_mouseover_reaction_btn(header) {\n    return (event) => {\n        header.textContent = event.target.getAttribute(\"data-title\");\n    };\n}\n\nfunction on_mouseout_reaction_btn(header, header_title) {\n    return (_) => header.textContent = header_title;\n}\n\nfunction on_click_reaction_btn(crid, cid) {\n    return (event) => {\n        event.preventDefault();\n        post_reaction({ comment: cid, reaction: crid }).then(data => {\n            handle_reaction_response(cid, data);\n        });\n    };\n}\n\nfunction on_mouseover_tooltip(event) {\n    const parent_all = event.target.parentNode.parentNode;\n    const bottom = parseInt(parent_all.getAttribute(\"data-tooltip-pos-bottom\")) || 0;\n    const left = parseInt(parent_all.getAttribute(\"data-tooltip-pos-left\")) || 0;\n    const tooltip = event.target.parentNode.children[0];\n    const target_pos = event.target.getBoundingClientRect();\n    const parent_all_pos = parent_all.getBoundingClientRect();\n    if (tooltip.className === \"reactions-tooltip\") {\n        tooltip.style.display = \"block\";\n        tooltip.style.bottom = `${bottom}px`;\n        tooltip.style.left = `${target_pos.x - parent_all_pos.x - left}px`;\n    }\n}\n\nfunction on_mouseout_tooltip(event) {\n    const tooltip = event.target.parentNode.children[0];\n    if (tooltip.className === \"reactions-tooltip\") {\n        tooltip.style.display = \"\";\n    }\n}\n\nfunction get_cookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nasync function post_reaction(data) {\n    const response = await fetch(window.dcx.react_url, {\n        method: \"POST\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n            \"X-CSRFToken\": get_cookie(\"csrftoken\"),\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        redirect: \"follow\",\n        referrerPolicy: \"no-referrer\",\n        body: JSON.stringify(data)\n    });\n    return response.json();\n}\n\nfunction handle_reaction_response(cid, data) {\n    const cm_footer = document.getElementById(`cm-footer-${cid}`);\n    const cm_reactions_div = document.getElementById(`cm-reactions-${cid}`);\n    if (data.counter > 0) {\n        const new_list = create_reactions_list(data);\n        if (cm_reactions_div === null) {\n            const reactions = document.createElement(\"div\");\n            reactions.id = `cm-reactions-${cid}`;\n            reactions.className = \"reactions\";\n            reactions.appendChild(new_list);\n            reactions.insertAdjacentHTML(\"beforeend\", \"&nbsp;\");\n            cm_footer.insertBefore(reactions, cm_footer.children[0]);\n            reactions.insertAdjacentHTML(\"afterend\", \"&nbsp;\");\n        } else {\n            const old_list = cm_reactions_div.querySelector(\".active-reactions\");\n            cm_reactions_div.replaceChild(new_list, old_list);\n        }\n    } else if (cm_reactions_div) {\n        cm_reactions_div.remove();\n        for (const node of cm_footer.childNodes) {\n            if (node.nodeType === Node.TEXT_NODE) {\n                node.textContent = \"\";\n            }\n        }\n    }\n    // Recalculate the position of the reactions buttons panel.\n    calc_buttons_panel_position(cid);\n}\n\nfunction create_reactions_list(data) {\n    const rroot = document.querySelector(\"[data-dcx=config]\");\n    const list = document.createElement(\"div\");\n    list.className = \"active-reactions\";\n    list.setAttribute(\"data-tooltip-pos-bottom\", rroot.getAttribute(\"data-tooltip-pos-bottom\"));\n    list.setAttribute(\"data-tooltip-pos-left\", rroot.getAttribute(\"data-tooltip-pos-left\"));\n    for (const item of data.list) {\n        const reaction = document.createElement(\"span\");\n        reaction.className = \"reaction\";\n        reaction.dataset.reaction = item.value;\n        reaction.appendChild(create_tooltip(item));\n        const anchor = document.createElement(\"a\");\n        anchor.className = \"small text-primary\";\n        anchor.setAttribute(\"data-toggle\", \"reactions-tooltip\");\n        anchor.addEventListener(\"mouseover\", on_mouseover_tooltip);\n        anchor.addEventListener(\"mouseout\", on_mouseout_tooltip);\n        anchor.appendChild(document.createTextNode(`${item.counter}`));\n        const emoji = document.createElement(\"span\");\n        emoji.className = \"emoji\";\n        emoji.innerHTML = `&${item.icon};`;\n        anchor.appendChild(emoji);\n        reaction.appendChild(anchor);\n        list.appendChild(reaction);\n    }\n    return list;\n}\n\nfunction create_tooltip(reaction) {\n    const tooltip = document.createElement(\"div\");\n    tooltip.className = \"reactions-tooltip\";\n    const arrow = document.createElement(\"div\");\n    arrow.className = \"arrow\";\n    tooltip.appendChild(arrow);\n    const p = document.createElement(\"p\");\n    p.textContent = `${reaction.authors.join(\", \")} ` +\n        `reacted with ${reaction.label}`;\n    tooltip.appendChild(p);\n    return tooltip;\n}\n\n/* ------------------------------------------------------------------------\n * Initialize the module when the page is loaded.\n *\n * Also, reactions panels must close when the user clicks outside of them,\n * or when the user hits the ESC key.\n */\nwindow.addEventListener(\"mouseup\", (event) => {\n    const data_attr = event.target.getAttribute(\"data-dcx\");\n    if (data_attr !== \"reactions-panel\") {\n        // Clicking outside the \"React\" link must close the reactions panel.\n        document.querySelectorAll(\".reactions-panel\").forEach(elem => {\n            elem.style.display = \"none\";\n        });\n    }\n});\n\nwindow.addEventListener(\"keyup\", (event) => {\n    if (event.key === \"Escape\") {\n        document.querySelectorAll(\".reactions-panel\").forEach(elem => {\n            elem.style.display = \"none\";\n        });\n    }\n});\n\nexport { init_reactions };\n","export default class ReplyFormsHandler {\n    constructor(qsReplyFormBase, qsReplyForms) {\n        this.replyFormBase = document.querySelector(qsReplyFormBase);\n        this.replyMap = new Map();\n\n        const cpage_field = window.dcx.page_param || \"cpage\";\n\n        for (const elem of document.querySelectorAll(qsReplyForms)) {\n            // Extract the reply_to value from the current reply_form.\n            // Also, it if does exist, extract the comment's page number too.\n            // Then replace the content of elem with a copy of\n            // this.replyFormBase and update the fields reply_to\n            // and comment's page number.\n            const rFormEl = elem.querySelector(\"form\");\n            if (rFormEl === null) {\n                console.error(\n                    `Could not find a reply form within one of ` +\n                    `the elements retrieved with ${qsReplyForms}.`\n                );\n                return;\n            }\n\n            const reply_to = rFormEl.elements.reply_to.value;\n            const cpage = rFormEl.elements[cpage_field]\n                ? rFormEl.elements[cpage_field].value\n                : null;\n\n            const section = this.replyFormBase.cloneNode(true);\n            section.dataset.dcx = `reply-form-${reply_to}`;\n\n            // Update fields reply_to and cpage..\n            const newForm = section.querySelector(\"form\");\n            newForm.elements.reply_to.value = reply_to;\n            if (cpage) {\n                newForm.elements[cpage_field].value = cpage;\n            }\n\n            const elemParent = elem.parentNode;\n            elem.replaceWith(section);\n            this.init(reply_to);\n            this.replyMap.set(reply_to, elemParent);\n        }\n    }\n\n    init(reply_to, is_active) {\n        const qs_section = `[data-dcx=reply-form-${reply_to}]`;\n        const section = document.querySelector(qs_section);\n\n        // Modify the form (update fields, add event listeners).\n        const newForm = section.querySelector(\"form\");\n        const post_btn = newForm.elements.post;\n        post_btn.addEventListener(\"click\", this.send_clicked(reply_to));\n        const preview_btn = newForm.elements.preview;\n        preview_btn.addEventListener(\"click\", this.preview_clicked(reply_to));\n        const cancel_btn = newForm.elements.cancel;\n        cancel_btn.addEventListener(\"click\", this.cancel_clicked(reply_to));\n        newForm.style.display = \"none\";\n\n        // Attach event listener to textarea.\n        const divta = section.querySelector(\"[data-dcx=reply-textarea]\");\n        const ta = divta.querySelector(\"textarea\");\n        ta.addEventListener(\"focus\", this.textarea_focus(reply_to));\n\n        // If is_active is true, hide the textarea and display the form.\n        if (is_active === true) {\n            section.classList.add(\"active\");\n            divta.style.display = \"none\";\n            newForm.style = \"\";\n            newForm.elements.comment.focus();\n        }\n    }\n\n    get_map_item(reply_to) {\n        const item = this.replyMap.get(reply_to);\n        if (item === undefined) {\n            const msg = `replyMap doesn't have a key ${reply_to}`;\n            console.error(msg);\n            throw msg;\n        }\n        return item;\n    }\n\n    disable_buttons(formEl, value) {\n        formEl.elements.post.disabled = value;\n        formEl.elements.preview.disabled = value;\n    }\n\n    is_valid(formEl) {\n        for (const el of formEl.querySelectorAll(\"[required]\")) {\n            if (!el.reportValidity()) {\n                el.focus();\n                return false;\n            }\n        }\n        return true;\n    }\n\n    textarea_focus(reply_to) {\n        // Display the comment form and hide the text area.\n        return (_) => {\n            const item = this.get_map_item(reply_to);\n            const qs_section = `[data-dcx=reply-form-${reply_to}`;\n            const section = item.querySelector(qs_section);\n            const form = section.querySelector(\"form\");\n            const divta = section.querySelector(\"[data-dcx=reply-textarea]\");\n            section.classList.toggle(\"active\");\n            divta.style.display = \"none\";\n            form.style = \"\";\n            form.elements.comment.focus();\n        };\n    }\n\n    cancel_clicked(reply_to) {\n    // Display the text area and hide the comment form.\n        return (_) => {\n            const item = this.get_map_item(reply_to);\n            const qs_section = `[data-dcx=reply-form-${reply_to}`;\n            const section = item.querySelector(qs_section);\n            const form = section.querySelector(\"form\");\n            const divta = section.querySelector(\"[data-dcx=reply-textarea]\");\n            const comment_value = form.elements.comment.value;\n            divta.querySelector(\"textarea\").value = comment_value;\n            section.classList.toggle(\"active\");\n            form.style.display = \"none\";\n            divta.style = \"\";\n\n            const previewEl = item.querySelector(\"[data-dcx=preview]\");\n            if (previewEl) {\n                previewEl.remove();\n            }\n        };\n    }\n\n    preview_clicked(reply_to) {\n        return (_) => {\n            this.post(\"preview\", reply_to);\n        };\n    }\n\n    send_clicked(reply_to) {\n        return (_) => {\n            this.post(\"post\", reply_to);\n        };\n    }\n\n    post(submit_button_name, reply_to) {\n        const item = this.get_map_item(reply_to);\n        const formEl = item.querySelector(\"form\");\n\n        if (!this.is_valid(formEl)) {\n            return;\n        }\n\n        this.disable_buttons(formEl, true);\n\n        const previewEl = item.querySelector(\"[data-dcx=preview]\");\n        if (previewEl) {\n            previewEl.remove();\n        }\n\n        const formData = new FormData(formEl);\n        if (submit_button_name !== undefined) {\n            formData.append(submit_button_name, 1);\n        }\n\n        fetch(formEl.action, {\n            method: \"POST\",\n            headers: {\n                \"X-Requested-With\": \"XMLHttpRequest\",\n            },\n            body: formData\n        }).then(response => {\n            if (submit_button_name === \"preview\") {\n                this.handle_preview_comment_response(response, reply_to);\n            } else if (submit_button_name === \"post\") {\n                this.handle_post_comment_response(response, reply_to);\n            }\n        });\n        this.disable_buttons(formEl, false);\n        return false; // To prevent calling the action attribute.\n    }\n\n    handle_http_200(item, data, reply_to) {\n        item.innerHTML = data.html;\n        this.init(reply_to, true); // 2nd param: is_active = true.\n        if (data.field_focus) {\n            item.querySelector(`[name=${data.field_focus}]`).focus();\n        }\n    }\n\n    handle_http_201_202_400(item, data) {\n        const form = item.querySelector(\"form\");\n        form.innerHTML = data.html;\n    }\n\n    async handle_preview_comment_response(response, reply_to) {\n        const item = this.get_map_item(reply_to);\n        const data = await response.json();\n\n        if (response.status === 200) {\n            this.handle_http_200(item, data, reply_to);\n        } else if (response.status === 400) {\n            this.handle_http_201_202_400(item, data);\n        }\n    }\n\n    async handle_post_comment_response(response, reply_to) {\n        const item = this.get_map_item(reply_to);\n        const data = await response.json();\n\n        if (response.status === 200) {\n            this.handle_http_200(item, data, reply_to);\n        }\n        else if (\n            response.status === 201 ||\n            response.status === 202 ||\n            response.status === 400\n        ) {\n            this.handle_http_201_202_400(item, data);\n        }\n        else if (response.status > 400) {\n            alert(\n                \"Something went wrong and your comment could not be \" +\n                \"processed. Please, reload the page and try again.\"\n            );\n        }\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { init_comments } from \"./comments.js\";\nimport { init_reactions } from \"./reactions.js\";\n\nwindow.dcx.init_comments = init_comments;\nwindow.dcx.init_reactions = init_reactions;\n\nwindow.addEventListener(\"DOMContentLoaded\", (_) => {\n    if (window.dcx === null) {\n        return;\n    }\n\n    init_comments();\n    init_reactions();\n});\n"],"names":[],"sourceRoot":""}